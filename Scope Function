Scope Function

- The Kotlin standard library contains several functions whose sole purpose is to execute a block of code within the context of an object. When you call such a function on an object with a lambda expression provided, it forms a temporary scope. In this scope, you can access the object without its name. Such functions are called scope functions.

- There are five of them: let, run, with, apply, and also.

-Basically, these functions all perform the same action: execute a block of code on an object. What's different is how this object becomes available inside the block and what the result of the whole expression is.

let: object ref -> it, Retrun Value - Lambda result , Is extenstion function -> Yes

 - The context object is available as an argument (it).
 - The return value is the lambda resul


also: object ref -> it, Retrun Value - context object , Is extenstion function -> Yes
- The context object is available as an argument (it).
- The return value is the object itself.
- also is useful for performing some actions that take the context object as an argument. Use also for actions that need a reference to the object rather than its properties and functions, or when you don't want to shadow the this reference from an outer scope.

apply: object ref -> this, Retrun Value - context object , Is extenstion function -> Yes
  - The context object is available as a receiver (this).
  - The return value is the object itself.
  - As apply returns the context object itself, we recommend that you use it for code blocks that don't return a value and that mainly operate on the members of the receiver object. The most common use case for apply is for object configuration. Such calls can be read as "apply the following assignments to the object."



run: object ref -> thiw, Retrun Value - Lambda result , Is extenstion function -> yes
  - The context object is available as a receiver (this).
  - The return value is the lambda result.
  - run does the same as with but it is implemented as an extension function. So like let, you can call it on the context object using dot notation.
  - run is useful when your lambda both initializes objects and computes the return value.



with: object ref -> this, Retrun Value - Lambda result , Is extenstion function -> No

  -The context object is available as a receiver (this).
  -The return value is the lambda result.
  -We recommend using with for calling functions on the context object when you don't need to use the returned result. In code, with can be read as "with this object, do the following."





Here is a short guide for choosing scope functions depending on the intended purpose:

- Executing a lambda on non-nullable objects: let

- Introducing an expression as a variable in local scope: let

- Object configuration: apply

- Object configuration and computing the result: run

- Running statements where an expression is required: non-extension run

- Additional effects: also

- Grouping function calls on an object: with

