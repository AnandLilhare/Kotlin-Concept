lambdas and higher-order functions

- A lambda expression, or lambda, is a type of object that holds a block of code. You can assign a lambda to a variable, just as you can any other sort of object, or pass a lambda to a function which can then execute the code it holds.

- Execute a lambda’s code by invoking it

val addInts = { x: Int, y: Int -> x + y }
val result = addInts.invoke(6, 7)

You can also invoke the lambda using the following shortcut:

val result = addInts(6, 7)

- A lambda’s type is also known as a function type.

- If you want to specify that a lambda has no return value, you can do so by declaring that its return type is Unit. 
ex: val calculation: (Int, Int) -> Unit = { x, y -> x + y }

- A function that uses a lambda as a parameter or return value is known as a higher-order function.

trailing lambdas:
According to Kotlin convention, if the last parameter of a function is a function, then a lambda expression passed as the corresponding argument can be placed outside the parentheses:

ex: val product = items.fold(1) { acc, e -> acc * e }

What is closures in kotline
In Kotlin, closures refer to a function or a lambda expression that captures and references variables from its surrounding lexical scope. Closures in Kotlin, like in many other programming languages, retain access to the variables declared in their enclosing scope even after the enclosing scope has finished execution.

fun createPrinter(): () -> Unit {
    var counter = 0
    return {
        println("Counter: ${counter++}")
    }
}

fun main() {
    val printer = createPrinter()
    
    printer() // Output: Counter: 0
    printer() // Output: Counter: 1
    printer() // Output: Counter: 2
}
Closures in Kotlin enable the lambda expressions or functions to retain and access the state of their surrounding context at the time of their creation. This feature is powerful as it allows creating functions that carry contextual information and can be executed later while retaining access to the variables that were in scope when they were defined.


high order function
In Kotlin, a higher-order function is a function that either takes functions as parameters, returns a function, or both. This concept is based on functional programming principles, where functions are treated as first-class citizens, allowing them to be passed around as values.

Here are a few key points about higher-order functions in Kotlin:
1.Takes functions as parameters: A higher-order function can accept other functions as arguments.
fun higherOrderFunction(a: Int, b: Int, operation: (Int, Int) -> Int): Int {
    return operation(a, b)
}

fun main() {
    val resultSum = higherOrderFunction(5, 3) { x, y -> x + y }
    val resultMultiply = higherOrderFunction(5, 3) { x, y -> x * y }

    println("Sum: $resultSum") // Output: Sum: 8
    println("Multiplication: $resultMultiply") // Output: Multiplication: 15
}

2. Returns a function: A higher-order function can also return a function as its result.
fun createAdder(value: Int): (Int) -> Int {
    return { x: Int -> value + x }
}

fun main() {
    val add5 = createAdder(5)
    val add10 = createAdder(10)

    println("Adding 5 to 7 gives: ${add5(7)}") // Output: Adding 5 to 7 gives: 12
    println("Adding 10 to 20 gives: ${add10(20)}") // Output: Adding 10 to 20 gives: 30
}
createAdder is a higher-order function that takes an integer value and returns a function that takes another integer and returns their sum.
The createAdder function returns a lambda expression that captures the value parameter and adds it to the provided argument.
When you call createAdder(5), it creates a function add5 that adds 5 to any given integer passed to it. Similarly, createAdder(10) creates a function add10 that adds 10 to any given integer passed to it.
3. Both
// Higher-order function that takes a function as a parameter and returns a function
fun operateOnNumbers(a: Int, b: Int, operation: (Int, Int) -> Int): (Int) -> Int {
    val result = operation(a, b)

    // Return a function that takes an integer and performs an operation on it
    return { value: Int -> operation(result, value) }
}

fun main() {
    val addResult = operateOnNumbers(5, 3) { x, y -> x + y }
    val multiplyResult = operateOnNumbers(5, 3) { x, y -> x * y }

    println("Adding 8 to previous addition result gives: ${addResult(8)}") // Output: Adding 8 to previous addition result gives: 16
    println("Multiplying by 4 to previous multiplication result gives: ${multiplyResult(4)}") // Output: Multiplying by 4 to previous multiplication result gives: 60
}
operateOnNumbers is a higher-order function that takes two integers (a and b) and a function (operation) that takes two integers and returns an integer.
Inside operateOnNumbers, operation is performed on a and b to get a result.
The higher-order function then returns a function that takes an integer value and performs the operation on the result obtained earlier and the value.
In main(), operateOnNumbers is used to create two different functions (addResult and multiplyResult) based on different operations passed to it. These returned functions can then be used to perform further operations by passing additional values
Question

Q: Does the code
   val x = { "Pow!" }
  assign the text “Pow!” to x?
Ans: No. The above assigns a lambda to x, and not a String. The lambda, however, returns “Pow!” when it is executed.

Q: Can I assign a lambda to a variable of type Any?
Ans: Yes. An Any variable can accept a reference to any type of object, including lambdas.


High Order Function
- A function that uses a lambda as a parameter or return value is known as a higher-order function.

Q: Why are lambdas called lambdas?
A: It’s because they come from an area of mathematics and computer science called Lambda Calculus, where small, anonymous functions are represented by the Greek letter λ (a lambda)

A: A lambda is a type of function, but in most languages, functions always have names. As you’ve already seen, a lambda doesn’t need to have a name.

Q: I’ve heard of functional programming. What’s that?

A: Lambdas are an important part of functional programming. While non-functional programming reads data input and generates data output, functional programs can read functions as input, and generate functions as output. If your code includes higher-order functions, you are doing functional programming.

Q: Is functional programming very different from object-oriented programming?

A: They are both ways of factoring your code. In object-oriented programming you combine data with functions, and in functional programming you combine functions with functions. The two styles of programming are not incompatible; they are just different ways of looking at the world.


Bullet Point:

1. A lambda expression, or lambda, takes the form:

{ x: Int -> x + 5 }
2. The lambda is defined within curly braces, and can include parameters, and a body.

3. A lambda can have multiple lines. The last evaluated expression in the body is used as the lambda’s return value.

You can assign a lambda to a variable. The variable’s type must be compatible with the type of the lambda.

3. A lambda’s type has the format:

(parameters) -> return_type
Where possible, the compiler can infer the lambda’s parameter types.

4. If the lambda has a single parameter, you can replace it with it.

You execute a lambda by invoking it. You do this by passing the lambda any parameters in parentheses, or by calling its invoke function.

5.You can pass a lambda to a function as a parameter, or use one as a function’s return value. A function that uses a lambda in this way is known as a higher-order function.

6.If the final parameter of a function is a lambda, you can move the lambda outside the function’s parentheses when you call the function.

7. If a function has a single parameter that’s a lambda, you can omit the parentheses when you call the function.

8. A type alias lets you provide an alternative name for an existing type. You define a type alias using typealias.




