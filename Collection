Collection


Standard Library

You can see what’s in the Kotlin Standard Library by browsing to:
https://kotlinlang.org/api/latest/jvm/stdlib/index.html

- Kotlin has three main types of collection—List, Set and Map—and each one has its own distinct purpose:
- List - when sequence matters
- Set - when uniqueness matters
- Map - when finding something by key matters
- Simple Lists, Sets and Maps are immutable

MutableList
 . add
 .remove
 .removeAt
 .set
 .sort
 .revers
 MutableList also has a toMutableList() function which returns a copy that’s a new MutableList.


 MutableSet
 - If you need a collection that doesn’t allow duplicates, you can use a Set: an unordered collection with no duplicate values.
 - A Set’s values are unordered, so unlike a List, there’s no get function you can use to get the value at a specified index. You can, however, still use the contains function to check whether a Set contains a particular value using code like this

Time for Map
Each entry in a Map is actually two objects—a key and a value. Each key has a single value associated with it. You can have duplicate values, but you can’t have duplicate keys.

BULLET POINTS

Create an array initialized with null values using the arrayOfNulls function.

Useful array functions include: sort, reverse, contains, min, max, sum, average.

The Kotlin Standard Library contains pre-built classes and functions grouped into packages.

A List is a collection that knows and cares about index position. It can contain duplicate values.

A Set is an unordered collection that doesn’t allow duplicate values.

A Map is a collection that uses key/value pairs. It can contain duplicate values, but not duplicate keys.

List, Set and Map are immutable. MutableList, MutableSet and MutableMap are mutable subtypes of these collections.

Create a List using the listOf function.

Create a MutableList using mutableListOf.

Create a Set using the setOf function.

Create a MutableSet using mutableSetOf.

A Set checks for duplicates by first looking for matching hash code values. It then uses the === and == operators to check for referential or object equality.

Create a Map using the mapOf function, passing in key/value pairs.

Create a MutableMap using mutableMapOf.