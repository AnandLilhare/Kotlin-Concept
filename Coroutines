


Coroutines:

- Coroutines let you write code that’s run asynchronously .
- When you call a suspendable function (such as delay) from another function, that function must be marked with suspend.

Bullet Point

- Coroutines let you run code asynchronously. They are useful for running background tasks.

- A coroutine is like a lightweight thread. Coroutines run on a shared pool of threads by default, and the same thread can run many coroutines.

- To use coroutines, create a Gradle project and add the coroutines library to build.gradle  as a dependency.

- Use the launch function to launch a new coroutine.

- The runBlocking function blocks the current thread until the code it contains has finished running.

- The delay function suspends the code for a specified length of time. It can be used inside a coroutine, or inside a function that’s marked using suspend.

-------------------------------------

- A coroutine is an instance of a suspendable computation. It is conceptually similar to a thread, in the sense that it takes a block of code to run that works concurrently with the rest of the code.

- However, a coroutine is not bound to any particular thread. It may suspend its execution in one thread and resume in another one.

launch : is a coroutine builder. It launches a new coroutine concurrently with the rest of the code, which continues to work independently.

delay: is a special suspending function. It suspends the coroutine for a specific time. Suspending a coroutine does not block the underlying thread, but allows other coroutines to run and use the underlying thread for their code

runBlocking: is also a coroutine builder that bridges the non-coroutine world of a regular fun main() and the code with coroutines inside of runBlocking { ... } curly braces. This is highlighted in an IDE by this: CoroutineScope hint right after the runBlocking opening curly brace.

If you remove or forget runBlocking in this code, you'll get an error on the launch call, since launch is declared only on the CoroutineScope:

Structured concurrency
----------------------
Coroutines follow a principle of structured concurrency which means that new coroutines can only be launched in a specific CoroutineScope which delimits the lifetime of the coroutine. 

Scope builder
---------
coroutineScope:it creates a coroutine scope and does not complete until all launched children complete

runBlocking and coroutineScope builders may look similar because they both wait for their body and all its children to complete. The main difference is that the runBlocking method blocks the current thread for waiting, while coroutineScope just suspends, releasing the underlying thread for other usages. Because of that difference, runBlocking is a regular function and coroutineScope is a suspending function.

- You can use coroutineScope from any suspending function.




