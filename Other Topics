Other Topics: 


1.Visibility modifiers
------------------

Kotlin has four visibility modifiers: public, private, protected and internal. Let’s see how these work.

----
3. Sealed classes

You’ve already seen that enum classes let you create a restricted set of values, but there are some situations where you need a little more flexibility.

Suppose that you want to be able to use two different message types in your application: one for “success”, and another for “failure”. You want to be able to restrict messages to these two types.

If you were to model this using an enum class, your code might look like this:

image
But there are a couple of problems with this approach:

* Each value is a constant which only exists as a single instance.

You can’t, say, change the msg property of the SUCCESS value in one situation, as this change will be seen everywhere else in your application.

* Each value must have the same properties and functions.

It might be useful to add an Exception property to the FAILURE value so that you can examine what went wrong, but an enum class won’t let you.

So what’s the solution

Sealed classes to the rescue!

Defination;
A solution to this kind of problem is to use a sealed class. A sealed class is like a souped-up version of an enum class. It lets you restrict your class hierarchy to a specific set of subtypes, each one of which can define its own properties and functions. And unlike an enum class, you can create multiple instances of each type.

-----

7. Extensions
Extensions let you add new functions and properties to an existing type without you having to create a whole new subtype.
- There are also Kotlin extension libraries you can use to make your coding life easier, such as Anko and Android KTX for Android app development.

8. Return, break and continue

* return

As you already know, this returns from the enclosing function.
* break

This terminates (or jumps to the end of) the enclosing loop, for example:

* continue

This moves to the next iteration of the enclosing loop, for example:

-------
9. More fun with functions
- vararg
If you want a function to accept multiple arguments of the same type but you don’t know how many, you can prefix the parameter with vararg. This tells the compiler that the parameter can accept a variable number of arguments. Here’s an example:

- infix
If you prefix a function with infix, you can call it without using the dot notation. Here’s an example of an infix function:

infix fun String.shouldBeEqualTo(value:String) = this == value

fun main() {
    val shouldBeEqualTo = "Hellow".shouldBeEqualTo("Hellow")
    println(shouldBeEqualTo)

    // Infix example

    val infiShouldBeEqualeTo = "Hellow" shouldBeEqualTo "Hellow"
    println(infiShouldBeEqualeTo)
}

- It is work when function is extension function or general function with single parameters.
-------------

Anonymous Function
- Anonymous function has not any name of function.
- if you compaire with labmda function, in anonymous fuction provide you luxary to write if and else condition logic.
-----------

Generic Concept

Kotlin uses the concepts of in, out, and where.

In: A type that is marked as in can be used as a parameter but not as a return value. This is also called covariance. 

out: Types that are marked as out can be used only as a return value, not as a parameter. This is called contravariance.

where: Furthermore, we may introduce constraints on types using the where keyword. In our case

(*) - You may be wondering what the star (*) means as regards generics. It's called a star projection, and it means I don't know anything about this type. It's similar to Java's raw types, but it's type safe.


